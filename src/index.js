import 'dotenv/config'
import { Bot, GrammyError, HttpError, InlineKeyboard, session } from 'grammy'
import {
  createSubscription,
  createUser,
  deleteSubscription,
  deleteChatSubscriptions,
  getSubscriptionChats,
  getSubscriptions,
  getUsers,
  getChatSubscriptions,
  initDatabase
} from './db/index.js'
import {
  brands,
  brandsKeyboard,
  confirmKeyboard,
  contactKeyboard,
  postKeyboard,
  sexes,
  sexKeyboard,
  sizeKeyboard,
  sizes
} from './keyboards/index.js'

await initDatabase()

const bot = new Bot(process.env.BOT_TOKEN)

bot.use(
  session({
    initial: () => ({
      brands: [],
      sex: null,
      sizes: [],
      message: null
    })
  })
)

bot.start()

bot.api.setMyCommands([
  { command: 'subscribe', description: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' },
  { command: 'my_subscriptions', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏' },
  { command: 'unsubscribe', description: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏' },
  { command: 'help', description: '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é ü•≤' }
])

bot.catch((err) => {
  const ctx = err.ctx
  console.error(`Error while handling update ${ctx.update.update_id}:`)

  const e = err.error
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description)
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e)
  } else {
    console.error('Unknown error:', e)
  }
})

const helpText =
  '–ë–æ—Ç —Å –ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –±–µ–≥–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ üëü\n\n' +
  '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
  '/subscribe - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n' +
  '/my_subscriptions - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n' +
  '/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n\n' +
  '–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è? –û–±—Ä–∞—Ç–∏—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ä–∞–∑–±–µ—Ä–µ–º—Å—è: @djull_zzz'

bot.command('start', async (ctx) => {
  await ctx.reply(helpText)

  const { id, username, first_name, last_name } = ctx.from
  await createUser(
    id,
    ctx.chatId,
    username,
    `${first_name} ${last_name}`.trim()
  )
})

bot.command('subscribe', async (ctx) => {
  if (process.env.ADMIN_ID === ctx.from.id.toString()) {
    await ctx.reply(
      '–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üëÄ'
    )
    return
  }

  await ctx.reply(
    '–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±—Ä–µ–Ω–¥ –∫—Ä–æ—Å—Å–æ–≤–æ–∫, –ø–æ–ª –∏ —Ä–∞–∑–º–µ—Ä.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:',
    { reply_markup: brandsKeyboard }
  )
})

bot.callbackQuery(
  brands.map(({ data }) => data),
  async (ctx) => {
    const { label } = brands.find(({ data }) => data === ctx.match)

    if (!ctx.session.brands.includes(label)) {
      ctx.session.brands.push(label)
    }
    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±—Ä–µ–Ω–¥—ã: ${ctx.session.brands.join(', ')}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –±—Ä–µ–Ω–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.`,
      { reply_markup: confirmKeyboard }
    )
    await ctx.answerCallbackQuery()
  }
)

bot.callbackQuery(
  sexes.map(({ data }) => data),
  async (ctx) => {
    const { label } = sexes.find(({ data }) => data === ctx.match)
    ctx.session.sex = label
    await ctx.reply(
      '–û—Å—Ç–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ä–∞–∑–º–µ—Ä–æ–º. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ:',
      { reply_markup: sizeKeyboard }
    )
    await ctx.answerCallbackQuery()
  }
)

bot.callbackQuery(
  sizes.map(({ data }) => data),
  async (ctx) => {
    const { label } = sizes.find(({ data }) => data === ctx.match)

    if (!ctx.session.sizes.includes(label)) {
      ctx.session.sizes.push(label)
    }
    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã: ${ctx.session.sizes.join('; ')}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.`,
      { reply_markup: confirmKeyboard }
    )
    await ctx.answerCallbackQuery()
  }
)

bot.callbackQuery('confirm', async (ctx) => {
  const { brands, sex, sizes } = ctx.session
  if (sizes.length) {
    if (process.env.ADMIN_ID === ctx.from.id.toString()) {
      await ctx.reply(
        `–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã.\n\n–ë—Ä–µ–Ω–¥: ${ctx.session.brands.join('; ')}\n–†–∞–∑–º–µ—Ä: ${ctx.session.sizes.join('; ')}\n–ü–æ–ª: ${ctx.session.sex}\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.`
      )
      await ctx.answerCallbackQuery()
      return
    }

    brands.forEach((brand) => {
      sizes.forEach(async (size) => {
        await createSubscription(ctx.chatId, sex, brand, size)
      })
    })

    await ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!')
    ctx.session = {
      brands: [],
      sex: null,
      sizes: [],
      message: null
    }
  } else if (sex) {
    await ctx.reply(
      '–û—Å—Ç–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ä–∞–∑–º–µ—Ä–æ–º. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ:',
      { reply_markup: sizeKeyboard }
    )
  } else if (brands.length) {
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', { reply_markup: sexKeyboard })
  }
  await ctx.answerCallbackQuery()
})

bot.command('my_subscriptions', async (ctx) => {
  if (process.env.ADMIN_ID === ctx.from.id.toString()) {
    await ctx.reply(
      '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscriptions'
    )
    return
  }

  const subscriptions = (await getChatSubscriptions(ctx.chatId))
    .map(({ sex, brand, size }, index) => {
      return `${index + 1}) ${brand} ${size} ${sex}`
    })
    .join('\n\n')

  await ctx.reply(
    subscriptions ||
      '–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe'
  )
})

bot.command('unsubscribe', async (ctx) => {
  if (process.env.ADMIN_ID === ctx.from.id.toString()) {
    await ctx.reply(
      '–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üëÄ'
    )
    return
  }

  const subscriptions = (await getChatSubscriptions(ctx.chatId)).map(
    ({ sex, brand, size }) => {
      return `${brand} ${size} ${sex}`
    }
  )

  const subscriptionsKeyboard = subscriptions.reduce(
    (result, label, index) => result.text(label, `unsubscribe_${index}`).row(),
    new InlineKeyboard()
  )
  subscriptionsKeyboard.text('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö', 'unsubscribe_all')

  await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:`, {
    reply_markup: subscriptionsKeyboard
  })
})

bot.command('help', async (ctx) => {
  await ctx.reply(helpText)
})

bot.command('post', async (ctx) => {
  if (ctx.from.id.toString() !== process.env.ADMIN_ID) {
    await ctx.reply('–ù–µ —Ç–æ–ª—å–∫–æ –ª–∏—à—å –∫–∞–∂–¥—ã–π —Å–ø–æ—Å–æ–±–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
    return
  }

  await ctx.reply(
    '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±—Ä–µ–Ω–¥ –∫—Ä–æ—Å—Å–æ–≤–æ–∫, –ø–æ–ª –∏ —Ä–∞–∑–º–µ—Ä.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:',
    { reply_markup: brandsKeyboard }
  )
})

bot.command('subscriptions', async (ctx) => {
  if (
    ![process.env.ADMIN_ID, process.env.TECH_SUPPORT_ID].includes(
      ctx.from.id.toString()
    )
  ) {
    await ctx.reply(
      '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_subscriptions'
    )
    return
  }

  const subscriptions = (await getSubscriptions())
    .map(({ sex, brand, size }, index) => {
      return `${index + 1}) ${brand} ${size} ${sex}`
    })
    .join('\n')

  await ctx.reply(subscriptions || '–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.')
})

bot.command('users', async (ctx) => {
  if (
    ![process.env.ADMIN_ID, process.env.TECH_SUPPORT_ID].includes(
      ctx.from.id.toString()
    )
  ) {
    await ctx.reply('–ù–µ —Ç–æ–ª—å–∫–æ –ª–∏—à—å –∫–∞–∂–¥—ã–π —Å–ø–æ—Å–æ–±–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
    return
  }

  const users = (await getUsers())
    .map(({ name, username }, index) => `${index + 1}) ${name} (@${username})`)
    .join('\n')
  await ctx.reply(users)
})

bot.command('clear', async (ctx) => {
  if (ctx.from.id.toString() !== process.env.ADMIN_ID) {
    await ctx.reply('–ù–µ —Ç–æ–ª—å–∫–æ –ª–∏—à—å –∫–∞–∂–¥—ã–π —Å–ø–æ—Å–æ–±–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
    return
  }

  ctx.session = {
    brands: [],
    sex: null,
    sizes: [],
    message: null
  }
  await ctx.reply(
    '–ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞?\n\n–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /post'
  )
})

bot.on('message', async (ctx) => {
  if (ctx.from.id.toString() !== process.env.ADMIN_ID) {
    await ctx.reply(
      '–ö–∞–∂–µ—Ç—Å—è, –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥–∞ üíî\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É (–∫–æ–Ω—Ç–∞–∫—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è).'
    )
    return
  }

  const { brands, sex, sizes } = ctx.session
  if (sizes.length && sex && brands) {
    ctx.session.message = ctx.msg
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: postKeyboard
    })
  } else {
    await ctx.reply('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /post')
  }
})

bot.callbackQuery('clear_message', async (ctx) => {
  ctx.session.message = null
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.')
  await ctx.answerCallbackQuery()
})

bot.callbackQuery('send', async (ctx) => {
  const { sex, brands, sizes, message } = ctx.session

  if (!message) {
    await ctx.reply('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')
    await ctx.answerCallbackQuery()
    return
  }

  const users = await getSubscriptionChats(sex, brands, sizes)

  for (const user of users) {
    if (message.photo) {
      await ctx.api.sendPhoto(user.chat_id, message.photo, {
        caption: message.caption,
        reply_markup: contactKeyboard
      })
      await ctx.api.send
    }
    if (message.text) {
      await ctx.api.sendMessage(user.chat_id, message.text, {
        reply_markup: contactKeyboard
      })
    }
  }

  ctx.session = {
    brands: [],
    sex: null,
    sizes: [],
    message: null
  }
  await ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è')
  await ctx.answerCallbackQuery()
})

bot.on('callback_query:data', async (ctx) => {
  const button = ctx.callbackQuery.data

  if (button === 'unsubscribe_all') {
    await deleteChatSubscriptions(ctx.chatId)
    await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫`)
  } else if (button.startsWith('unsubscribe')) {
    const index = button.match(/\d+/)[0]
    const subscriptions = await getChatSubscriptions(ctx.chatId)

    if (index && index < subscriptions.length) {
      await deleteSubscription(subscriptions[index].id)
    }
    await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏`)
  }

  await ctx.answerCallbackQuery()
})

process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
