import 'dotenv/config'
import { Bot, GrammyError, HttpError, session } from 'grammy'
import {
  deleteSubscription,
  deleteChatSubscriptions,
  getSubscriptionChats,
  getChatSubscriptions,
  initDatabase,
  getSetting,
  updateSetting
} from './db/index.js'
import { contactKeyboard, postKeyboard } from './keyboards/index.js'
import user_subscriptions from './commands/user/subscriptions.js'
import user_calculator from './commands/user/calculator.js'
import admin_subscriptions from './commands/admin/subscriptions.js'
import admin_calculator from './commands/admin/calculator.js'

await initDatabase()

const bot = new Bot(process.env.BOT_TOKEN)

bot.use(
  session({
    initial: () => ({
      brands: [],
      sex: null,
      sizes: [],
      message: null,
      command: null,
      price: null
    })
  })
)

bot.use(user_subscriptions)
bot.use(admin_subscriptions)
bot.use(user_calculator)
bot.use(admin_calculator)

bot.start()

bot.api.setMyCommands(
  [
    {
      command: 'calculate_price',
      description: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É —Å —Å–∞–π—Ç–∞ Tradeinn'
    },
    { command: 'subscribe', description: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' },
    { command: 'my_subscriptions', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏' },
    { command: 'unsubscribe', description: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏' },
    { command: 'help', description: '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é ü•≤' }
  ],
  {
    scope: { type: 'all_private_chats' }
  }
)

bot.catch((err) => {
  const ctx = err.ctx
  console.error(`Error while handling update ${ctx.update.update_id}:`)

  const e = err.error
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description)
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e)
  } else {
    console.error('Unknown error:', e)
  }
})

bot.on('message', async (ctx) => {
  if (ctx.session.command === 'set_rate') {
    const newRate = parseFloat(ctx.msg.text)
    if (isNaN(newRate)) {
      return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç üíî\n–ü—Ä–∏–º–µ—Ä: 100.02')
    }

    await updateSetting('rate', newRate)
    ctx.session.command = null
    return await ctx.reply(`–ö–∞–∫ —Å–∫–∞–∂–µ—à—å! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—Å ${newRate}.`)
  }

  if (ctx.session.command === 'set_commission') {
    const newCommission = parseFloat(ctx.msg.text)
    if (isNaN(newCommission)) {
      return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç üíî\n–ü—Ä–∏–º–µ—Ä: 100.02')
    }

    await updateSetting('commission', newCommission)
    ctx.session.command = null
    return await ctx.reply(`–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è ${newCommission}%.`)
  }

  if (ctx.session.command === 'calculate_price') {
    const price = parseFloat(ctx.msg.text)
    if (isNaN(price)) {
      return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç üíî\n–ü—Ä–∏–º–µ—Ä: 102.99')
    }
    ctx.session.command = 'calculate_price_2'
    ctx.session.price = price
    return await ctx.reply(
      '–û–∫! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.'
    )
  }

  if (ctx.session.command === 'calculate_price_2') {
    const delivery = parseFloat(ctx.msg.text)
    if (isNaN(delivery)) {
      return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç üíî\n–ü—Ä–∏–º–µ—Ä: 40.99')
    }
    const rate = await getSetting('rate')
    const commission = await getSetting('commission')
    const result =
      Math.ceil(
        ((ctx.session.price + delivery / 2) *
          1.1 *
          rate *
          (1 + commission / 100)) /
          100
      ) * 100
    ctx.session.command = null
    ctx.session.price = null
    return await ctx.reply(
      `–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ –†–§: ${result} —Ä—É–±.\n–î–ª—è –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @temchik05. –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!`
    )
  }

  if (ctx.from.id.toString() !== process.env.ADMIN_ID) {
    await ctx.reply(
      '–ö–∞–∂–µ—Ç—Å—è, –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥–∞ üíî\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É (–∫–æ–Ω—Ç–∞–∫—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è).'
    )
    return
  }

  const { brands, sex, sizes } = ctx.session
  if (sizes.length && sex && brands) {
    ctx.session.message = ctx.msg
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: postKeyboard
    })
  } else {
    await ctx.reply('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /post')
  }
})

bot.callbackQuery('clear_message', async (ctx) => {
  ctx.session.message = null
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.')
  await ctx.answerCallbackQuery()
})

bot.callbackQuery('send', async (ctx) => {
  const { sex, brands, sizes, message } = ctx.session

  if (!message) {
    await ctx.reply('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')
    await ctx.answerCallbackQuery()
    return
  }

  const users = await getSubscriptionChats(sex, brands, sizes)

  for (const user of users) {
    if (message.photo) {
      try {
        await ctx.api.sendPhoto(
          user.chat_id,
          message.photo[message.photo.length - 1].file_id,
          {
            caption: message.caption,
            reply_markup: contactKeyboard
          }
        )
      } catch (e) {
        console.log(e + ' from ' + user)
      }
    }
    if (message.text) {
      try {
        await ctx.api.sendMessage(user.chat_id, message.text, {
          reply_markup: contactKeyboard
        })
      } catch (e) {
        console.log(e + ' from ' + user)
      }
    }
  }

  ctx.session = {
    brands: [],
    sex: null,
    sizes: [],
    message: null
  }
  await ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è')
  await ctx.answerCallbackQuery()
})

bot.on('callback_query:data', async (ctx) => {
  const button = ctx.callbackQuery.data

  if (button === 'unsubscribe_all') {
    await deleteChatSubscriptions(ctx.chatId)
    await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫`)
  } else if (button.startsWith('unsubscribe')) {
    const index = button.match(/\d+/)[0]
    const subscriptions = await getChatSubscriptions(ctx.chatId)

    if (index && index < subscriptions.length) {
      await deleteSubscription(subscriptions[index].id)
    }
    await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏`)
  }

  await ctx.answerCallbackQuery()
})

process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
